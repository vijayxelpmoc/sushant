service: palette-firebase-service
useDotenv: true

plugins:
  - serverless-offline
  - serverless-deployment-bucket

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:PALETTE_AWS_REGION}
  ecr:
    images:
      appimage:
        path: ./
  apiGateway:
    minimumCompressionSize: 1024
    restApiId: ${env:PALETTE_API_GATEWAY_ID}
    restApiRootResourceId: ${env:PALETTE_API_GATEWAY_ROOT_ID}
  deploymentBucket:
    name: ${env:PALETTE_AWS_STORAGE_BUCKET_NAME}
    serverSideEncryption: AES256
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    PORT: ${env:PORT}
    NODE_ENV: ${env:NODE_ENV}
    SALESFORCE_GRANT_TYPE: ${env:SALESFORCE_GRANT_TYPE}
    SALESFORCE_CLIENT_ID: ${env:SALESFORCE_CLIENT_ID}
    SALESFORCE_CLIENT_SECRET: ${env:SALESFORCE_CLIENT_SECRET}
    SALESFORCE_USERNAME: ${env:SALESFORCE_USERNAME}
    SALESFORCE_PASSWORD: ${env:SALESFORCE_PASSWORD}
    PALETTE_SERVICE_NAME: ${env:PALETTE_SERVICE_NAME}
    PALETTE_AWS_REGION: ${env:PALETTE_AWS_REGION}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${env:AWS_NODEJS_CONNECTION_REUSE_ENABLED}
    FIREBASE_ACCOUNT_TYPE: ${env:FIREBASE_ACCOUNT_TYPE}
    FIREBASE_PROJECT_ID: ${env:FIREBASE_PROJECT_ID}
    FIREBASE_PRIVATE_KEY_ID: ${env:FIREBASE_PRIVATE_KEY_ID}
    FIREBASE_PRIVATE_KEY: ${env:FIREBASE_PRIVATE_KEY}
    FIREBASE_CLIENT_EMAIL: ${env:FIREBASE_CLIENT_EMAIL}
    FIREBASE_CLIENT_ID: ${env:FIREBASE_CLIENT_ID}
    FIREBASE_AUTH_URI: ${env:FIREBASE_AUTH_URI}
    FIREBASE_TOKEN_URI: ${env:FIREBASE_TOKEN_URI}
    FIREBASE_AUTH_PROVIDER: ${env:FIREBASE_AUTH_PROVIDER}
    FIREBASE_CLIENT_CERT_URL: ${env:FIREBASE_CLIENT_CERT_URL}
    FIREBASE_STORAGE_BUCKET: ${env:FIREBASE_STORAGE_BUCKET}
    FIREBASE_TOKEN_BASE_URL: ${env:FIREBASE_TOKEN_BASE_URL}
    FIREBASE_LOG_FILE_PASSWORD: ${env:FIREBASE_LOG_FILE_PASSWORD}
  iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'

functions:
  main:
    image:
      name: appimage
      command:
        - dist/lambda.handler
      entryPoint:
        - '/lambda-entrypoint.sh'
    handler: dist/lambda.handler
    events:
      - sqs:
          arn: ${env:PALETTE_AWS_SQS_FIREBASE_QUEUE_ARN}
      - http:
          method: PATCH
          path: firebase/uuid
          cors: true
      - http:
          method: POST
          path: firebase/testNotif
          cors: true
